#!/usr/bin/env bash

[[ "$1" != +(\-)@([hH])?([eE][lL][pP]) ]] || {
	echo -e "\e[1;32mNAME\e[0;32m:\e[0m"
	echo '   op - otherpipe'
	echo -e "\e[1;32mUSAGE\e[0;32m:\e[0m"
	echo -e "   Apply EXPRESSION(s) to each line of input passed through a pipe [\e[1;4;33mAND/OR\e[0m] read from a file:"
	echo -e "         \`\e[1;37m[ input... | ] ${0##*\/}  'EXPRESSION(s)'...  [FILE]\e[0m\`"
	echo -e "                                                 \e[0;37m# if supplied, FILE must be the final argument.\e[0m"
	echo -e "   \e[1;4;33mOR\e[0m passed verbatim as \`\$1\`:"
	echo -e "         \`\e[1;37m${0##*\/} 'INPUT STRING' 'EXPRESSION(s)'... \e[0m\`"
	echo ""
	[[ "$2" != *(\-)@(all|expr?(ession)|full|syntax|v?(erbose)) ]] && echo -e " * \e[3mFor info on EXPRESSION syntax, run:\e[0m \`\e[1;37m${0##*\/} -h all\e[0m\`\n" || {
		echo -e " * \e[1;33mEXPRESSIONs\e[0m are applied"
		echo '         - to each line of input (unless otherwise specified)'
		echo '         - in the order they were supplied,'
		echo ""
		echo -e "\e[1;32mBASH BUILT-IN EXPANSIONS\e[0;32m:\e[0;37m (do what you'd expect)\e[0m"
		echo "  ':N'        : from Nth to last char(s)"
		echo "  '::N'       : from first to Nth char(s)"
		echo "  ':N:N'      : from Nth to Nth char(s)"
		echo "  '%...*'     : preceding last of ..."
		echo "  '%%...*'    : preceding any of ..."
		echo "  '#*...'     : after first of ..."
		echo "  '##*...'    : after any of ..."
		echo "  '/w/[e]'    : replace first of 'w' with ['e']"
		echo "  '//w/[e]'   : replace any of 'w' with ['e']"
		echo "  '^'         : make first character Uppercase."
		echo "  '^^'        : make all characters UPPERCASE."
		echo "  ','         : make first character lOWERCASE."
		echo "  ',,'        : make all characters lowercase."
		echo "  '~[abc]'    : swap case of first [(detected) optionally specified] character."
		echo "  '~~[abc]'   : swap case of all [(detected) optionally specified] characters."
		echo -e "                \e[0;37m# if [character(s)] are specified but none are detected, does nothing\e[0m"
		echo -e "                \e[0;37m#  otherwise, behaves normally.\e[0m"
		echo ""
		echo -e "\e[1;32mFILTERING & CONDITIONAL EXPRESSIONS\e[0;32m:\e[0m"
		echo "  '??[=|~]_'        : Supress lines not [matching|containing] _"
		echo "  '?![=|~]_'        : Supress lines [matching|containing] _"
		echo "  '??[=|~]_.{EXPR}' : Apply EXPR to lines [matching|containing] _"
		echo "  '?![=|~]_.{EXPR}' : Apply EXPR to lines not [matching|containing] _"
		echo -e "      \e[0;37m# examples:\e[0m"
		echo -e "      \e[0;37m#\e[0m  \`... | op '??=*whatev*' \`\e[0;37m (supress lines not matching *'whatev'*)\e[0m"
		echo -e "      \e[0;37m#\e[0m  \`... | op '?!~whatev' \`\e[0;37m (supress lines containing 'whatev')\e[0m"
		echo -e "      \e[0;37m#\e[0m  \`... | op '??~whatev.{(_).}' \`\e[0;37m (prepend all lines containing 'whatev' with '_')\e[0m"
		echo ""
		echo -e "\e[1;32mMISCELLANEOUS EXPRESSIONS\e[0;32m:\e[0m"
		echo '  -[BP],'
		echo '    --before,'
		echo '    --prepend _'
		echo "          '(_).'    : Prepend each line with _"
		echo ""
		echo '  -A,'
		echo '   --after,'
		echo '   --append _'
		echo "        '.(_)'      : Append _ to each line"
		echo ""
		echo '   -[fFcC],         : POSIX color codes (defaults to `\e[0;...`(typically 30-40),'
		echo '   --[color,font]=                       but any `\e[...` expression should work)'
		echo -e "                   \e[0;37m# examples:\e[0m"
		echo -e "                   \e[0;37m#\e[0m   \`... | op -c '1;33;3' \`"
		echo -e "                   \e[0;37m#\e[0m   \`... | op --color=33 \`"
		echo -e "                    \e[0;37m(*) supply font effects last as any remaining EXPRESSIONS are likely to remove them.\e[0m"
		echo ""
		echo "  ':*',          : Extends the \`:N:N\` substring expansions to allow any string/[pattern]. Carve away."
		echo -e "   '::*',         \e[0;37m# examples:\e[0m"
		echo -e "    ':*:*',       \e[0;37m#\e[0m   \`... | op ':[wW]::hat[eE]ver' \`"
		echo -e "     ':*::*'      \e[0;37m#\e[0m   \`... | op ':ex:[ABC123]' \`"
		echo -e "                  \e[0;37m#\e[0m   \`... | op '::[aAbBcC]' \`"
		echo ""
		echo "  \"//_/*\$'\\n'*\" : Replace each of '_' with *newline*"
		echo ""
		echo "  \"//\$'\\n'/*\"   : Remove or replace newlines with [*| ]"
		echo ""
		echo " '{N}.EXPR'     : Repeatedly apply EXPR(any other EXPRESSION) N times."
		echo -e "                 \e[0;37m# example:\e[0m"
		echo -e "                 \e[0;37m# trim up to third occurance of ['/'or'\']\e[0m"
		echo -e "                 \e[0;37m#\e[0m   \`... | ${0##*\/} '{3}.#*[\/\\]' \`"
		echo ""
	}
	exit 0
}

declare -g String
declare -ga Strings

exactly() {
	_0() { [[ "$String" == ${@} ]] ; }
	_1() { [[ "$String" != ${@} ]] ; }
	_$1 "${@:2}"
}

fuzzily() {
	_0() { [[ "$String" == *"${@}"* || "${@}" == *"$String"* || "$String" == *${@}* || ${@} == *"$String"* ]] ; }
	_1() { [[ "$String" != *"${@}"* && "${@}" != *"$String"* && "$String" != *${@}* && ${@} != *"$String"* ]] ; }
	_${1} "${@:2}"
}

dp() { while read item ; do Array[${#Array[@]}]="$item" ; done < <(for ((x=1;x<=$#;x++)); do echo "${!x}" ; done ; [ -t 0 ] || cat - ) ; local IFS=\| ; echo "${Array[*]}" ; }

toLast() {
	_b() { : "${2%$1*}" ; [[ "$1" != \[*\] ]] && String="${2::${#_}+${#1}}" || String="${2::${#_}+1}" ; }
	_a() { : "${String%%$1*}" ; _b "$2" "${String:${#_}}" ; }
	_a "$1" "$2"
}
toFirst() {
	_b() { : "${2%%$1*}" ; [[ "$1" != \[*\] ]] && String="${2::${#_}+${#1}}" || String="${2::${#_}+1}" ; }
	_a() { : "${String%%$1*}" ; _b "$2" "${String:${#_}}" ; }
	_a "$1" "$2"
}

dundre() { [[ "$String" != *$1* ]] || String="${String%%${String#*$1}*}" ; }

OtherPipe() {
	local -a Argz string
	while read line ; do
		String="${line}"
		for ((;++a<=$#;)); do
			case "${!a}" in
			*\/*"$'\n'"*\/*) if [[ "${!a##*\/}" == *[!\ ]* ]]; then cat - | dp "$String" | $FUNCNAME "//\|/'${!a##*\/}'" "${@:$a+1}" ; else { echo "$String" ; cat - ; } | xargs | $FUNCNAME "${@:$a+1}" ; fi ; unset String ;;
			\/*[!\/]*\/*"$'\n'"*) eval Strings\=\( $(eval printf '%q' \"\$\{String"${!a}"\}\") \) ; unset String ;;
			[\_\.]\(*\)) String="$String${!a:2: -1}" ;;
			\-[bB]*|\-\-[bp][er][fe][op][re][en]*) [[ -z "${!a//*\=*}" ]] || ((++a)) ; String="${!a#*\=}$String" ;;
			\(*\)[\.\_]) String="${!a:1: -2}$String" ;;
			\-[aA]|\-\-a[pf][pt][e][nr]*) [[ -z "${!a/*\=*/}" ]] || ((++a)) ; String="$String${!a#*\=}" ;;
			\-[cCfF]|'--color'*|'--font'*) [[ -z "${!a//*\=*/}" ]] || ((++a)) ; String=$(echo -e "\e[${!a#*\=}m$String\e[0m") ;;
			\?\?\=*[!\}]) exactly "0" "${!a:3}" || { unset String ; break ; } ;;
			\?\!\=*[!\}]) exactly "1" "${!a:3}" || { unset String ; break ; } ;;
			\?\?\~*[!\}]) fuzzily "0" "${!a:3}" || { unset String ; break ; } ;;
			\?\!\~*[!\}]) fuzzily "1" "${!a:3}" || { unset String ; break ; } ;;
			\?\?\=*\.\{*\}) onDo="${!a#*\.\{}" && exactly "1" "${!a:3: -${#onDo}-2}" ||  { Argz=( "$String" ${onDo:: -1}  ) && for ((z=0;z<${#Argz[@]};z++)); do string=$(echo "${string:-$String}" | $FUNCNAME "${Argz[z]}") ; done && String="$string" ; unset string Argz[*] ; } ;;
			\?\!\=*\.\{*\}) onDo="${!a#*\.\{}" && exactly "0" "${!a:3: -${#onDo}-2}" || { Argz=( "$String" ${onDo:: -1}  ) && for ((z=0;z<${#Argz[@]};z++)); do string=$(echo "${string:-$String}" | $FUNCNAME "${Argz[z]}") ; done && String="$string" ; unset string Argz[*] ; } ;;
			\?\?\~*\.\{*\}) onDo="${!a#*\.\{}" && fuzzily "1" "${!a:3: -${#onDo}-2}" || { Argz=( "$String" ${onDo:: -1}  ) && for ((z=0;z<${#Argz[@]};z++)); do string=$(echo "${string:-$String}" | $FUNCNAME "${Argz[z]}") ; done && String="$string" ; unset string Argz[*] ; } ;;
			\?\!\~*\.\{*\}) onDo="${!a#*\.\{}" && fuzzily "0" "${!a:3: -${#onDo}-2}" || { Argz=( "$String" ${onDo:: -1}  ) && for ((z=0;z<${#Argz[@]};z++)); do string=$(echo "${string:-$String}" | $FUNCNAME "${Argz[z]}") ; done && String="$string" ; unset string Argz[*] ; } ;;
			\:[!0-9\:]*|\:\:[!0-9]*)
				if [[ "${!a}" == \:\:+([!\:])\:\:* ]]; then
					while read ence ; do [[ -z "$ence" ]] || dundre "$ence" ; done < <(echo "${!a//'::'/$'\n'}" )
				else
					if [[ "${!a}" == \:+([!\:])\:+([!\:]) ]]; then
						x="${!a:1}" && y="${x#*\:}" && toFirst "${x%%\:*}" "$y"
						unset x y
					elif [[ "${!a}" == \:+([!\:])\:\:* ]]; then
						x="${!a:1}" && y="${x#*\:\:}" && toLast "${x%%\:*}" "$y"
						unset x y
					else
						if [[ ${!a:1:1} == \: ]]; then
							dundre "${!a:2}"
						else
							[[ "$String" != *${!a:1}* ]] || String="${String#*${String%%${!a:1}*}}"
						fi
					fi
				fi
				;;
			*)
				if [[ "${!a}" == \{+([[:digit:]])\}\.* ]]; then
					rp="${!a%%\}*}" && ((rt=(${rp:1} + 0)))
					for ((ri=0;ri<rt;ri++)); do
						String=$(echo "$String" | $FUNCNAME "${!a#*\}\.}")
					done
					unset rp rt ri
				else
					eval String\=\$\{String"${!a}"\}
				fi
			esac
			if (( ${#Strings[@]} != 0 )); then
				for ((i=0;i<${#Strings[@]};i++)); do
					echo "${Strings[i]}"
				done | $0 "${@:$a+1}"
				unset Strings[*]
				continue
			fi
			(( ${#String} > 0 )) || break
		done
		(( ${#String} == 0 )) || echo "$String"
	done < <(cat - )
}

[[ -f "${!#-1}" && $# -gt 1 ]] && { [ -t 0 ] && { cat "${!#-1}" | OtherPipe "${@:1:$#-1}" ; } || { cat "${!#-1}" - | OtherPipe "${@:1:$#-1}" ; } ; } || { [ -t 0 ] && { echo "$1" | OtherPipe "${@:2}" ; } || { cat - | OtherPipe "${@}" ; } ; } 2>/dev/null
