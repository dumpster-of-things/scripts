#!/usr/bin/env bash
#Prog() { echo "scale=2; ${3:-100} * ($1 / $2)" | bc | cut -d\. -f1 ; }
Bars() { printf "\e[0;30m\u256D\e[9m%${2}s\e[29m\u256E\n\u251D\e[1;9;32m%${1}s\e[2;34m%$((${2}-${1}))s\e[m\e[0;30m\u2525\n\u2570\e[9m%${2}s\e[29m\u256F\e[0m\n%${2}s${3}\n" ; }
Spit() { w=$(($(getSize x)-4)) ; Bars $(prog $w $2 $1 | tr -d "%") $w "$(prog 100 $2 $1)%" ; }
#Spit() { w=$(($(getSize x)-4)) ; Bars $(Prog $1 $2 $w) $w "$(Prog $1 $2)%%" ; }
if [[ "${1:-}${2:-}" != @([0-9])+([0-9]) ]]; then
	[[ "${2:-$1}" != *(\-)[eE][xX][aA][mM][pP][lL][eE] ]] || { tput civis; i=1; for((;i<42;)){ tput clear ; Spit $((++i)) 42 ; sleep 0.1 ; }; tput reset ; exit 0 ; }
	echo 'USAGE:'$'\n''   `progbar {current_count} {total}`'
	echo 'REQUIRED:'$'\n''   Two numerical arguments (numerator denominator).'
	echo 'DESCRIPTION:'
	echo '   Generates a singe "frame" of a progress meter.'
	echo '   Use it in a looping process to draw a status bar in real time.'
	echo '   For example:'$'\n''   ` tput civis; i=1; for((;i<42;)){ tput clear ; progbar $((++i)) 42 ; sleep 0.1 ; }; tput reset `'
	echo $'\n''* Run `progbar --example` for a visual demonstration of the above example.'$'\n'
	echo '* You may want to extract the useful bits from this script and add them to your project directly as to eliminate unecessary overhead.'$'\n'
	exit $(($#==0?1:0))
else
	Spit ${@} || {
		[[ -x $(which prog) ]] || { echo "Missing dependency: https://github.com/dumpster-of-things/scripts/raw/main/prog" ; }
		[[ -x $(which getSize) ]] || { echo "Missing dependency: https://github.com/dumpster-of-things/scripts/raw/main/getSize" ; }
		exit 1
	}	
fi
